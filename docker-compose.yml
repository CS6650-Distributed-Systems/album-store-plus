version: '3.8'

services:
  # MySQL database for the command side
  mysql:
    image: mysql:8.0
    container_name: album-store-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: albumstore
      MYSQL_USER: albumuser
      MYSQL_PASSWORD: albumpass
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - album-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "albumuser", "-palbumpass"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LocalStack for AWS services emulation
  localstack:
    image: localstack/localstack:latest
    container_name: album-store-localstack
    restart: unless-stopped
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,dynamodb,lambda,sns,sqs
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=true
      - DEBUG=1
    volumes:
      - "${TMPDIR:-/tmp}/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - album-network

  # Command API service
  command-api:
    build:
      context: .
      dockerfile: Dockerfile.command
    container_name: album-store-command-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=albumuser
      - DB_PASSWORD=albumpass
      - DB_NAME=albumstore
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - SNS_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:album-events
      - S3_BUCKET_NAME=album-store-images
    depends_on:
      - mysql
      - localstack
    networks:
      - album-network

  # Query API service
  query-api:
    build:
      context: .
      dockerfile: Dockerfile.query
    container_name: album-store-query-api
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - DYNAMODB_TABLE=albums
      - S3_BUCKET_NAME=album-store-images
    depends_on:
      - localstack
    networks:
      - album-network

  # Init service to set up AWS resources
  init-aws:
    build:
      context: .
      dockerfile: Dockerfile.init
    container_name: album-store-init
    environment:
      - AWS_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
    depends_on:
      - localstack
    networks:
      - album-network

volumes:
  mysql-data:

networks:
  album-network:
    driver: bridge